/// <reference types="react" />

import { DefineIconParameters } from 'froala-editor';
import { DraggableProvidedDragHandleProps } from 'react-beautiful-dnd';
import { MutableRefObject } from 'react';
import { default as React_2 } from 'react';
import { RefObject } from 'react';
import { RegisterCommandParameters } from 'froala-editor';

/**
 * Represents basic set of additional action properties.
 */
declare interface AdditionalActionProps {
    readonly identifier: string;
    readonly componentName: string;
}

/**
 * Represents RTE dropdown option component for inserting assets.
 */
export declare const AssetPanelRichTextEditorNestedComponent: React_2.ForwardRefExoticComponent<RichTextEditorNestedComponentProps & React_2.RefAttributes<RichTextEditorNestedComponentRef>>;

export declare const AssetRichTextEditorPlugin: ({ inputRef, froalaEditorConfigurator, froalaEditorRef }: AssetRichTextEditorPluginProps) => JSX.Element;

export declare interface AssetRichTextEditorPluginProps extends RichTextEditorPluginProps {
}

declare interface BaseButtonProps extends UITestProps {
    readonly renderComponent: (props: InjectedProps) => React.ReactNode;
    readonly size?: ButtonSize;
    readonly color?: ButtonColor;
    readonly label?: string;
    readonly icon?: IconName;
    readonly trailingIcon?: IconName;
    readonly active?: boolean;
    readonly badge?: boolean;
    readonly fillContainer?: boolean;
    readonly destructive?: boolean;
    readonly inProgress?: boolean;
    readonly disabled?: boolean;
    readonly borderless?: boolean;
    readonly tabIndex?: number;
    readonly dragHandleProps?: DraggableProvidedDragHandleProps | null;
    readonly className?: string;
}

declare enum ButtonColor {
    Primary = 'primary',
    Secondary = 'secondary',
    Tertiary = 'tertiary',
    Quinary = 'quinary'
}

declare interface ButtonProps extends HTMLButtonProps, Omit<BaseButtonProps, 'renderComponent'> {
    readonly type?: ButtonType;
    readonly buttonRef?: RefObject<HTMLButtonElement>;
    readonly tooltipAppendTo?: Element;
}

declare enum ButtonSize {
    XS = 'XS',
    S = 'S',
    M = 'M',
    L = 'L'
}

declare enum ButtonType {
    Button = 'button',
    Submit = 'submit',
    Reset = 'reset'
}

/**
 * Command result interface.
 */
export declare interface Command<T = any> {
    /**
     * Invocation callback.
     */
    execute: CommandExecutor<T, void>;
}

/**
 * Defines a command context type.
 */
declare interface CommandContextType {
    /**
     * Executes page command.
     * @param name Name of the command to be executed.
     * @param data Data passed to the command.
     * @param files Files to be uploaded by the command.
     * @param abortController Abort controller which can abort the command request.
     */
    executeCommand: <TCommandResult = void, TData = void>(name: string, data?: TData, files?: FileList, abortController?: AbortController) => Promise<TCommandResult | undefined>;
    /**
     * Registers command into the current provider.
     * @param name Name of the command to be registered.
     * @param execute Callback that executes the command.
     */
    registerCommand: <T>(name: string, execute: (data: T, files?: FileList) => Promise<void>) => void;
}

/**
 * Command invocation callback.
 */
export declare type CommandExecutor<TData, TResponse> = (data?: TData, files?: FileList, abortController?: AbortController) => Promise<TResponse>;

declare interface DialogAction extends Omit<DialogFooterActionProps, 'color'> {}

declare interface DialogFooterActionProps
extends Pick<ButtonProps, 'icon' | 'trailingIcon' | 'destructive' | 'disabled' | 'inProgress' | 'color' | 'onClick'>,
UITestProps {
    readonly label: string;
    readonly tooltipText?: string;
}

/**
 * Represents dialog handlers exposing submit action.
 */
declare interface DialogHandlers {
    readonly submitAction: DialogAction;
}

/**
 * Represents information about form field.
 */
export declare interface FieldInfo {
    readonly name: string;
    readonly fieldValues: FieldInfoValueType;
}

/**
 * Collection of field values.
 */
export declare type FieldInfoValueType = Record<string, any>;

/**
 * Represents basic set of form component properties.
 */
export declare interface FormComponentProps extends FieldInfo {
    readonly componentName: string;
    readonly hasDependencies: boolean;
    readonly label?: string;
    readonly statusText?: string;
    readonly explanationText?: string;
    readonly tooltip?: string;
    readonly disabled?: boolean;
    readonly value?: any;
    readonly invalid?: boolean;
    readonly validationMessage?: string;
    readonly validationRules?: ValidationRuleProps[];
    readonly additionalActions?: AdditionalActionProps[];
    readonly labelActionsElement?: React.ReactNode;
    readonly onChange?: (value: OnChangeValueType) => void;
    readonly required?: boolean;
    readonly inactiveMessage?: string;
    readonly guid: string;
    /**
     * Dangerously sets tooltip as inner HTML.
     */
    readonly tooltipAsHtml?: boolean;
    /**
     * Dangerously sets explanation as inner HTML.
     */
    readonly explanationTextAsHtml?: boolean;
}

/** Configurator enables custom Froala Typescript plugins to use global Froala configuration methods, which would be unavailable due to different module context. */
declare interface FroalaEditorConfigurator {
    readonly defineIcon: (iconName: string, parameters: Partial<DefineIconParameters>) => void;
    readonly registerCommand: (buttonName: string, parameters: Partial<RegisterCommandParameters>) => void;
    readonly disableButton: (buttonName: string, buttonTitle?: string) => void;
    readonly enableButton: (buttonName: string, buttonTitle?: string) => void;
}

declare type HTMLButtonProps = Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, 'title' | 'onClick'>;

declare type IconName = keyof typeof Icons;

declare const Icons = {
    'xp-a-lowercase': aLowercase,
    'xp-accordion': accordion,
    'xp-add-module': addModule,
    'xp-android': android,
    'xp-apple': apple,
    'xp-arrow-crooked-left': arrowCrookedLeft,
    'xp-arrow-crooked-right': arrowCrookedRight,
    'xp-arrow-curved-left': arrowCurvedLeft,
    'xp-arrow-curved-right': arrowCurvedRight,
    'xp-arrow-double-left': arrowDoubleLeft,
    'xp-arrow-double-right': arrowDoubleRight,
    'xp-arrow-down-circle': arrowDownCircle,
    'xp-arrow-down-line': arrowDownLine,
    'xp-arrow-down': arrowDown,
    'xp-arrow-enter-square': arrowEnterSquare,
    'xp-arrow-leave-square': arrowLeaveSquare,
    'xp-arrow-left-circle': arrowLeftCircle,
    'xp-arrow-left-rect': arrowLeftRect,
    'xp-arrow-left': arrowLeft,
    'xp-arrow-right-circle': arrowRightCircle,
    'xp-arrow-right-rect': arrowRightRect,
    'xp-arrow-right-top-square': arrowRightTopSquare,
    'xp-arrow-right': arrowRight,
    'xp-arrow-send': arrowSend,
    'xp-arrow-u-left': arrowULeft,
    'xp-arrow-u-right': arrowURight,
    'xp-arrow-up-circle': arrowUpCircle,
    'xp-arrow-up-line': arrowUpLine,
    'xp-arrow-up': arrowUp,
    'xp-arrows-crooked': arrowsCrooked,
    'xp-arrows-h': arrowsH,
    'xp-arrows-v': arrowsV,
    'xp-arrows': arrows,
    'xp-b': b,
    'xp-badge': badge,
    'xp-ban-sign': banSign,
    'xp-bell': bell,
    'xp-bezier-scheme': bezierScheme,
    'xp-bin': bin,
    'xp-binder': binder,
    'xp-book-opened': bookOpened,
    'xp-box-cart': boxCart,
    'xp-box-cogwheel': boxCogwheel,
    'xp-box': box,
    'xp-boxes': boxes,
    'xp-braces-octothorpe': bracesOctothorpe,
    'xp-braces': braces,
    'xp-brand-bing': brandBing,
    'xp-brand-facebook': brandFacebook,
    'xp-brand-google-plus': brandGooglePlus,
    'xp-brand-google': brandGoogle,
    'xp-brand-instagram': brandInstagram,
    'xp-brand-linkedin': brandLinkedin,
    'xp-brand-mstranslator': brandMstranslator,
    'xp-brand-open-id': brandOpenId,
    'xp-brand-pinterest': brandPinterest,
    'xp-brand-sharepoint': brandSharepoint,
    'xp-brand-twitter': brandTwitter,
    'xp-brand-youtube': brandYoutube,
    'xp-breadcrumb': breadcrumb,
    'xp-briefcase': briefcase,
    'xp-broom': broom,
    'xp-brush-slashed': brushSlashed,
    'xp-brush': brush,
    'xp-bubble-censored': bubbleCensored,
    'xp-bubble-check': bubbleCheck,
    'xp-bubble-hide': bubbleHide,
    'xp-bubble-inverted': bubbleInverted,
    'xp-bubble-pencil': bubblePencil,
    'xp-bubble-show': bubbleShow,
    'xp-bubble-times': bubbleTimes,
    'xp-bubble-with-lines': bubbleWithLines,
    'xp-bubble': bubble,
    'xp-bubbles': bubbles,
    'xp-bucket-shovel': bucketShovel,
    'xp-bug': bug,
    'xp-building-block': buildingBlock,
    'xp-building': building,
    'xp-bullseye': bullseye,
    'xp-c-sharp': cSharp,
    'xp-calendar-number': calendarNumber,
    'xp-calendar': calendar,
    'xp-camera': camera,
    'xp-cancel': cancel,
    'xp-caret-down': caretDown,
    'xp-caret-left-aligned-right': caretLeftAlignedRight,
    'xp-caret-left': caretLeft,
    'xp-caret-right-aligned-left': caretRightAlignedLeft,
    'xp-caret-right-down': caretRightDown,
    'xp-caret-right': caretRight,
    'xp-caret-up': caretUp,
    'xp-carousel': carousel,
    'xp-cb-check-disabled': cbCheckDisabled,
    'xp-cb-check-inverted': cbCheckInverted,
    'xp-cb-check-minus': cbCheckMinus,
    'xp-cb-check-preview': cbCheckPreview,
    'xp-cb-check-sign': cbCheckSign,
    'xp-cb-check': cbCheck,
    'xp-cb-uncheck': cbUncheck,
    'xp-chain-broken': chainBroken,
    'xp-chain-slash': chainSlash,
    'xp-chain': chain,
    'xp-check-circle-inverted': checkCircleInverted,
    'xp-check-circle': checkCircle,
    'xp-check': check,
    'xp-checklist': checklist,
    'xp-chevron-double-down': chevronDoubleDown,
    'xp-chevron-double-left': chevronDoubleLeft,
    'xp-chevron-double-right': chevronDoubleRight,
    'xp-chevron-double-up': chevronDoubleUp,
    'xp-chevron-down-circle': chevronDownCircle,
    'xp-chevron-down-line': chevronDownLine,
    'xp-chevron-down-square': chevronDownSquare,
    'xp-chevron-down': chevronDown,
    'xp-chevron-left-circle': chevronLeftCircle,
    'xp-chevron-left-line': chevronLeftLine,
    'xp-chevron-left-square': chevronLeftSquare,
    'xp-chevron-left': chevronLeft,
    'xp-chevron-right-circle': chevronRightCircle,
    'xp-chevron-right-line': chevronRightLine,
    'xp-chevron-right-square': chevronRightSquare,
    'xp-chevron-right': chevronRight,
    'xp-chevron-up-circle': chevronUpCircle,
    'xp-chevron-up-line': chevronUpLine,
    'xp-chevron-up-square': chevronUpSquare,
    'xp-chevron-up': chevronUp,
    'xp-choice-multi-scheme': choiceMultiScheme,
    'xp-choice-single-scheme': choiceSingleScheme,
    'xp-choice-user-scheme': choiceUserScheme,
    'xp-chrome': chrome,
    'xp-circle-dashed': circleDashed,
    'xp-circle-inverted': circleInverted,
    'xp-circle-slashed': circleSlashed,
    'xp-circle-square': circleSquare,
    'xp-circle': circle,
    'xp-clapperboard': clapperboard,
    'xp-clipboard-checklist': clipboardChecklist,
    'xp-clipboard-list': clipboardList,
    'xp-clock': clock,
    'xp-cloud': cloud,
    'xp-cogwheel-square': cogwheelSquare,
    'xp-cogwheel': cogwheel,
    'xp-cogwheels': cogwheels,
    'xp-collapse-scheme': collapseScheme,
    'xp-collapse': collapse,
    'xp-compass': compass,
    'xp-convert': convert,
    'xp-cookie': cookie,
    'xp-crosshair-f': crosshairF,
    'xp-crosshair-o': crosshairO,
    'xp-cup': cup,
    'xp-custom-element': customElement,
    'xp-database': database,
    'xp-desktop': desktop,
    'xp-dialog-window-cogwheel': dialogWindowCogwheel,
    'xp-dialog-window': dialogWindow,
    'xp-diamond': diamond,
    'xp-doc-arrows': docArrows,
    'xp-doc-ban-sign': docBanSign,
    'xp-doc-copy': docCopy,
    'xp-doc-inverted': docInverted,
    'xp-doc-move': docMove,
    'xp-doc-paste': docPaste,
    'xp-doc-plus': docPlus,
    'xp-doc-torn': docTorn,
    'xp-doc-user': docUser,
    'xp-doc': doc,
    'xp-dollar-sign': dollarSign,
    'xp-dots-vertical': dotsVertical,
    'xp-down-dir': downDir,
    'xp-drawers': drawers,
    'xp-e-book': eBook,
    'xp-earth': earth,
    'xp-edge': edge,
    'xp-edit': edit,
    'xp-ekg-line': ekgLine,
    'xp-ellipsis': ellipsis,
    'xp-engage-users': engageUsers,
    'xp-exclamation-triangle-inverted': exclamationTriangleInverted,
    'xp-exclamation-triangle': exclamationTriangle,
    'xp-expand': expand,
    'xp-eye-slash': eyeSlash,
    'xp-eye': eye,
    'xp-f': f,
    'xp-factory': factory,
    'xp-file-pdf': filePdf,
    'xp-file': file,
    'xp-filter-1': filter1,
    'xp-firefox': firefox,
    'xp-flag': flag,
    'xp-folder-belt': folderBelt,
    'xp-folder-clock': folderClock,
    'xp-folder-inverted': folderInverted,
    'xp-folder-opened': folderOpened,
    'xp-folder': folder,
    'xp-form': form,
    'xp-funnel': funnel,
    'xp-gauge': gauge,
    'xp-gift': gift,
    'xp-graduate-cap': graduateCap,
    'xp-graph': graph,
    'xp-h-1': h1,
    'xp-h-2': h2,
    'xp-h-3': h3,
    'xp-h-4': h4,
    'xp-half-arrows-right-left': halfArrowsRightLeft,
    'xp-hat-moustache': hatMoustache,
    'xp-heart': heart,
    'xp-heartshake': heartshake,
    'xp-highlighter': highlighter,
    'xp-home': home,
    'xp-i-circle': iCircle,
    'xp-i': i,
    'xp-id-card': idCard,
    'xp-id-cards': idCards,
    'xp-indent': indent,
    'xp-integration-scheme': integrationScheme,
    'xp-intercom': intercom,
    'xp-internet-explorer': internetExplorer,
    'xp-invoice': invoice,
    'xp-kentico': kentico,
    'xp-key': key,
    'xp-l-article-map': lArticleMap,
    'xp-l-calendar-number-article': lCalendarNumberArticle,
    'xp-l-cols-2': lCols2,
    'xp-l-cols-20-60-20': lCols206020,
    'xp-l-cols-20-80': lCols2080,
    'xp-l-cols-25-50-25': lCols255025,
    'xp-l-cols-3': lCols3,
    'xp-l-cols-30-70': lCols3070,
    'xp-l-cols-4': lCols4,
    'xp-l-cols-70-30': lCols7030,
    'xp-l-cols-80-20': lCols8020,
    'xp-l-forms-2': lForms2,
    'xp-l-grid-2-2': lGrid22,
    'xp-l-grid-3-2': lGrid32,
    'xp-l-header-cols-2-footer': lHeaderCols2Footer,
    'xp-l-header-cols-3-footer': lHeaderCols3Footer,
    'xp-l-header-list-img': lHeaderListImg,
    'xp-l-header-menu-text': lHeaderMenuText,
    'xp-l-header-text': lHeaderText,
    'xp-l-img-2-cols-3': lImg2Cols3,
    'xp-l-img-3-cols-3': lImg3Cols3,
    'xp-l-lightbox': lLightbox,
    'xp-l-list-article-col': lListArticleCol,
    'xp-l-list-article': lListArticle,
    'xp-l-list-img-article': lListImgArticle,
    'xp-l-list-title': lListTitle,
    'xp-l-logotype-menu-col-footer': lLogotypeMenuColFooter,
    'xp-l-logotype-menu-h-col': lLogotypeMenuHCol,
    'xp-l-logotype-menu-v-col': lLogotypeMenuVCol,
    'xp-l-menu-cols-2': lMenuCols2,
    'xp-l-menu-cols-3': lMenuCols3,
    'xp-l-menu-list-img-col': lMenuListImgCol,
    'xp-l-menu-list-img': lMenuListImg,
    'xp-l-menu-list': lMenuList,
    'xp-l-menu-text-col-bottom': lMenuTextColBottom,
    'xp-l-menu-text-col': lMenuTextCol,
    'xp-l-menu-text': lMenuText,
    'xp-l-rows-2': lRows2,
    'xp-l-rows-3': lRows3,
    'xp-l-rows-4': lRows4,
    'xp-l-text-col': lTextCol,
    'xp-l-text': lText,
    'xp-laptop': laptop,
    'xp-layout': layout,
    'xp-layouts': layouts,
    'xp-life-belt': lifeBelt,
    'xp-light-bulb': lightBulb,
    'xp-lines-rectangle': linesRectangle,
    'xp-linux': linux,
    'xp-list-bullets': listBullets,
    'xp-list-numbers': listNumbers,
    'xp-list': list,
    'xp-lock-unlocked': lockUnlocked,
    'xp-lock': lock,
    'xp-loop': loop,
    'xp-magnifier-minus': magnifierMinus,
    'xp-magnifier-plus': magnifierPlus,
    'xp-magnifier': magnifier,
    'xp-map-marker': mapMarker,
    'xp-map': map,
    'xp-market': market,
    'xp-mask': mask,
    'xp-media-player': mediaPlayer,
    'xp-menu': menu,
    'xp-merge': merge,
    'xp-message': message,
    'xp-messages': messages,
    'xp-microphone': microphone,
    'xp-minus-circle': minusCircle,
    'xp-minus-square': minusSquare,
    'xp-minus': minus,
    'xp-mobile': mobile,
    'xp-modal-close': modalClose,
    'xp-modal-maximize': modalMaximize,
    'xp-modal-minimize': modalMinimize,
    'xp-modal-question': modalQuestion,
    'xp-money-bill': moneyBill,
    'xp-monitor-broken': monitorBroken,
    'xp-monitor-smartphone': monitorSmartphone,
    'xp-monitor': monitor,
    'xp-mug': mug,
    'xp-multi-channel': multiChannel,
    'xp-newspaper': newspaper,
    'xp-note': note,
    'xp-notebook': notebook,
    'xp-octothorpe': octothorpe,
    'xp-one': one,
    'xp-opera': opera,
    'xp-organisational-scheme': organisationalScheme,
    'xp-outdent': outdent,
    'xp-palette': palette,
    'xp-pants': pants,
    'xp-paper-plane': paperPlane,
    'xp-paperclip': paperclip,
    'xp-paragraph-center': paragraphCenter,
    'xp-paragraph-short': paragraphShort,
    'xp-paragraph': paragraph,
    'xp-parent-child-scheme-inverted': parentChildSchemeInverted,
    'xp-parent-child-scheme': parentChildScheme,
    'xp-parent-children-scheme-2': parentChildrenScheme2,
    'xp-parent-children-scheme-3': parentChildrenScheme3,
    'xp-pause': pause,
    'xp-pc': pc,
    'xp-pda': pda,
    'xp-percent-sign': percentSign,
    'xp-perfume': perfume,
    'xp-permission-list': permissionList,
    'xp-personalisation-variants': personalisationVariants,
    'xp-personalisation': personalisation,
    'xp-picture': picture,
    'xp-pictures': pictures,
    'xp-piechart-lines': piechartLines,
    'xp-piechart': piechart,
    'xp-pilcrow': pilcrow,
    'xp-pin-inverted': pinInverted,
    'xp-pin': pin,
    'xp-placeholder': placeholder,
    'xp-plus-circle': plusCircle,
    'xp-plus-square': plusSquare,
    'xp-plus': plus,
    'xp-printer': printer,
    'xp-process-scheme': processScheme,
    'xp-project-scheme': projectScheme,
    'xp-puzzle': puzzle,
    'xp-qr-code': qrCode,
    'xp-question-circle': questionCircle,
    'xp-rb-check-sign': rbCheckSign,
    'xp-rb-check': rbCheck,
    'xp-rb-uncheck': rbUncheck,
    'xp-recaptcha': recaptcha,
    'xp-rectangle-a-inverted': rectangleAInverted,
    'xp-rectangle-a': rectangleA,
    'xp-rectangle-h': rectangleH,
    'xp-rectangle-paragraph': rectangleParagraph,
    'xp-rectangle-v': rectangleV,
    'xp-resize': resize,
    'xp-restriction-list': restrictionList,
    'xp-ribbon': ribbon,
    'xp-right-double-quotation-mark': rightDoubleQuotationMark,
    'xp-rotate-double-right': rotateDoubleRight,
    'xp-rotate-left': rotateLeft,
    'xp-rotate-right': rotateRight,
    'xp-rss': rss,
    'xp-s': s,
    'xp-safari': safari,
    'xp-scheme-circles-triangle': schemeCirclesTriangle,
    'xp-scheme-connected-circles': schemeConnectedCircles,
    'xp-scheme-path-circles-flipped': schemePathCirclesFlipped,
    'xp-scheme-path-circles': schemePathCircles,
    'xp-scissors': scissors,
    'xp-separate': separate,
    'xp-share-apple': shareApple,
    'xp-share-google': shareGoogle,
    'xp-shoe-women': shoeWomen,
    'xp-shopping-cart': shoppingCart,
    'xp-small-dot-centered': smallDotCentered,
    'xp-smartphone': smartphone,
    'xp-software-package': softwarePackage,
    'xp-spinner': spinner,
    'xp-square-dashed-line': squareDashedLine,
    'xp-square-dashed': squareDashed,
    'xp-square': square,
    'xp-staging-scheme': stagingScheme,
    'xp-star-empty': starEmpty,
    'xp-star-full': starFull,
    'xp-star-semi': starSemi,
    'xp-stop': stop,
    'xp-subscript': subscript,
    'xp-superscript': superscript,
    'xp-t-f': tF,
    'xp-t-shirt': tShirt,
    'xp-t-with-cross': tWithCross,
    'xp-t': t,
    'xp-tab-vertical': tabVertical,
    'xp-tab': tab,
    'xp-table': table,
    'xp-tablet': tablet,
    'xp-tag': tag,
    'xp-tags': tags,
    'xp-three-dots-vertical': threeDotsVertical,
    'xp-timed-box': timedBox,
    'xp-times-circle': timesCircle,
    'xp-times': times,
    'xp-translate': translate,
    'xp-tree-structure': treeStructure,
    'xp-triangle-right': triangleRight,
    'xp-trophy': trophy,
    'xp-truck': truck,
    'xp-two-rectangles-h': twoRectanglesH,
    'xp-two-rectangles-stacked-times': twoRectanglesStackedTimes,
    'xp-two-rectangles-stacked': twoRectanglesStacked,
    'xp-two-rectangles-v': twoRectanglesV,
    'xp-two-squares-line': twoSquaresLine,
    'xp-two-squares-with-lines': twoSquaresWithLines,
    'xp-u': u,
    'xp-up-dir': upDir,
    'xp-user-checkbox': userCheckbox,
    'xp-user-frame': userFrame,
    'xp-user': user,
    'xp-users': users,
    'xp-vb': vb,
    'xp-watch': watch,
    'xp-windows': windows,
    'xp-wizard-stick': wizardStick,
    'xp-x': x,
    'xp-xml-tag': xmlTag
};

declare interface InjectedProps {
    readonly classes: string;
    readonly children: React.ReactNode;
}

/**
 * Describes options and configuration of a link plugin added to Rich text editor.
 */
export declare interface LinkRichTextEditorPluginOptions extends RichTextEditorPluginOptionsBase {
    /**
     * Dropdown options for a dropdown used in the plugin.
     */
    readonly dropdownOptions: RichTextEditorDropdownOption[];
}

/**
 * LinkRichTextEditorPlugin properties.
 */
export declare interface LinkRichTextEditorPluginProps extends RichTextEditorPluginProps {
}

export declare enum LinkType {
    Asset = "asset",
    External = "external",
    WebPage = "webpage"
}

declare interface NotificationMessage {
    readonly id?: string | number;
    readonly message: string;
    readonly type: NotificationMessageType;
    readonly messageAsHtml?: boolean;
}

declare enum NotificationMessageType {
    Success = "success",
    Error = "error",
    Warning = "warning",
    Info = "info"
}

/**
 * Untyped alias for value used on change.
 */
declare type OnChangeValueType = Object | null;

/**
 * Describes single dropdown option configuration.
 */
export declare interface RichTextEditorDropdownOption {
    /**
     * Option to be contained in dropdown.
     */
    readonly linkOption: string;
    /**
     * Corresponding component of an option.
     */
    readonly componentName?: string;
}

export declare const RichTextEditorNestedComponentLoader: {
    ({ onLoad, ...props }: RichTextEditorNestedComponentLoaderProps): JSX.Element;
    displayName: string;
};

export declare interface RichTextEditorNestedComponentLoaderProps extends RichTextEditorNestedComponentProps {
    /** Function called after load of the plugin. */
    readonly onLoad: (inputRef: RichTextEditorNestedComponentRef) => void;
}

export declare interface RichTextEditorNestedComponentProps {
    readonly componentName: string;
    /** Reference to RichTextEditor providing higher-scope functions (i.e. inserting link/image or executing a command). */
    readonly inputRef?: RefObject<RichTextEditorRef>;
    /** General low-level reference to Froala editor. */
    readonly froalaEditorRef?: MutableRefObject<any>;
    /** Configurator is used to access Froala configuration methods usually available in global JS scope and unavailable for a plugin in different JS module. */
    readonly froalaEditorConfigurator: FroalaEditorConfigurator;
}

/**
 * Ref to provide rich text editor's nested component methods.
 */
export declare interface RichTextEditorNestedComponentRef {
    /**
     * Runs rich text editor nested component.
     */
    readonly execute: () => void;
}

/**
 * Describes options and configuration of a custom plugin added to Rich text editor.
 */
declare interface RichTextEditorPluginOptionsBase {}

declare interface RichTextEditorPluginProps {
    readonly componentName: string;
    /** Reference to RichTextEditor providing higher-scope functions (i.e. inserting link/image or executing a command). */
    readonly inputRef?: RefObject<RichTextEditorRef>;
    /** General low-level reference to Froala editor. */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    readonly froalaEditorRef?: MutableRefObject<any>;
    /** Configurator is used to access Froala configuration methods usually available in global JS scope and unavailable for a plugin in different JS module. */
    readonly froalaEditorConfigurator: FroalaEditorConfigurator;
    /** Options and configuration of RTE plugins. */
    readonly pluginOptions?: RichTextEditorPluginOptionsBase;
}

/**
 * Ref to provide rich text editor's methods.
 */
declare interface RichTextEditorRef {
    /**
     * Insert image into the text on current caret position (required).
     */
    readonly insertImage: (imageUrl: string, imageAttributes: { [key: string]: string }) => void;
    /**
     * Replace image with a different one.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    readonly replaceImage: (imageUrl: string, imageAttributes: { [key: string]: string }, imageToReplace: any) => void;
    /**
     * Insert link into the text on current caret position (required).
     */
    readonly insertLink: (linkUrl: string, linkTitle: string, linkAttributes?: { [key: string]: string }) => void;
    /**
     * Executes registered command by its name.
     */
    readonly executeCommand: (commandName: string) => void;
    /**
     * Insert html content into the text on current caret position (required).
     */
    readonly insertHtml?: (htmlContent: string) => void;
    /**
     * Ensure onChange event.
     */
    readonly ensureChange?: () => void;
    /**
     * Indicates if the rich text editor is disabled.
     */
    readonly isDisabled?: () => boolean;
}

export declare const RoutingContentPlaceholder: ({ children }: RoutingContentPlaceholderProps) => JSX.Element;

/**
 * Represents properties for RoutingContentPlaceholder component.
 */
export declare interface RoutingContentPlaceholderProps {
    children?: React_2.ReactNode;
}

/**
 * Represents properties for Dialog context component.
 */
export declare interface TemplateDialogContextProps {
    /**
     * Indicates whether the dialog is displayed.
     */
    readonly isInDialog: boolean;
    /**
     * Title of the dialog.
     */
    readonly title: string;
    /**
     * Sets the title of the dialog.
     */
    readonly setTitle: (title: string) => void;
    /**
     * Minimal width of the dialog.
     */
    readonly minWidth?: string | number;
    /**
     * Sets minimal width of the dialog.
     */
    readonly setMinWidth: (width: string | number) => void;
    /**
     * Width of the dialog.
     */
    readonly width?: string | number;
    /**
     * Sets width of the dialog.
     */
    readonly setWidth: (width: string | number) => void;
    /**
     * Maximal width of the dialog.
     */
    readonly maxWidth?: string | number;
    /**
     * Sets maximal width of the dialog.
     */
    readonly setMaxWidth: (width: string | number) => void;
    /**
     * Minimal height of the dialog.
     */
    readonly minHeight?: string | number;
    /**
     * Sets minimal height of the dialog.
     */
    readonly setMinHeight: (height: string | number) => void;
    /**
     * Height of the dialog.
     */
    readonly height?: string | number;
    /**
     * Sets height of the dialog.
     */
    readonly setHeight: (height: string | number) => void;
    /**
     * Maximal height of the dialog.
     */
    readonly maxHeight?: string | number;
    /**
     * Sets maximal height of the dialog.
     */
    readonly setMaxHeight: (height: string | number) => void;
    /**
     * Indicates whether the dialog is displayed in fullscreen view.
     */
    readonly isFullscreen: boolean;
    /**
     * Sets whether the dialog has dimensions of the fullscreen.
     */
    readonly setIsFullscreen: (isFullscreen: boolean) => void;
    /**
     * Represents handlers for dialog actions.
     */
    readonly dialogHandlers: DialogHandlers;
    /**
     * @deprecated Property is deprecated and will be removed in the next version.
     *
     * Dialog messages.
     */
    readonly messages: NotificationMessage[];
    /**
     * @deprecated Property is deprecated and will be removed in the next version.
     *
     * Adds dialog message.
     */
    readonly addDialogMessage: (message: NotificationMessage) => void;
    /**
     * @deprecated Property is deprecated and will be removed in the next version.
     *
     * Removes dialog message.
     */
    readonly removeDialogMessage: (id: string | number) => void;
    /**
     * @deprecated Property is deprecated and will be removed in the next version.
     *
     * Determines whether message should be displayed inside of the dialog instead of the standard snackbar.
     */
    readonly canProcessMessageType: (messageVariant: NotificationMessageType) => boolean;
    /**
     * Closes the dialog.
     */
    readonly closeDialog: () => void;
    /**
     * Indicates whether dialog action is currently in progress.
     */
    readonly actionInProgress: boolean;
    /**
     * Sets whether dialog action is currently in progress.
     */
    readonly setActionInProgress: (prevent: boolean) => void;
}

declare interface UITestProps {
    /**
     * Test id data attribute.
     */
    readonly dataTestId?: string;
}

/**
 * Command execution configuration.
 */
export declare type UseCommandConfig<TCommandResult, TCommandData> = {
    /**
     * Command data.
     */
    data?: TCommandData;
    /**
     * Indicates whether command should be invoked automatically on component mount.
     * Defaults to `false`.
     */
    executeOnMount?: boolean;
    /**
     * Custom action executed before the command execution.
     * If the function returns `false` the command will not be executed.
     */
    before?: () => boolean | void;
    /**
     * Custom action executed after the command execution.
     */
    after?: (commandResult: TCommandResult | undefined) => void;
};

/**
 * Registers command into the current command provider and returns its invocation callback.
 *
 * @param fieldInfo Related form field info
 * @param commandName Name of the command.
 * @param config Command options.
 * @param dependencies If present, command will only activate if the values in the list change.
 * @returns Invocation callback to be executed manually.
 */
export declare const useFormComponentCommand: <TCommandResult, TCommandData = void>(fieldInfo: FieldInfo, commandName: string, config?: UseCommandConfig<TCommandResult, TCommandData> | undefined, dependencies?: React_2.DependencyList) => Command<TCommandData>;

/**
 * Returns the form command provider for the current page.
 */
export declare const useFormComponentCommandProvider: () => {
    executeCommand: <TCommandResult = void, TData = void>(fieldInfo: FieldInfo, name: string, data?: TData | undefined, files?: FileList, abortController?: AbortController) => Promise<TCommandResult | undefined>;
};

/**
 * Registers command into the current command provider and returns its invocation callback.
 *
 * @param commandName Name of the command.
 * @param config Command options.
 * @param dependencies If present, command will only activate if the values in the list change.
 * @returns Invocation callback to be executed manually.
 */
export declare function usePageCommand<TCommandResult, TCommandData = void>(commandName: string, config?: UseCommandConfig<TCommandResult, TCommandData>, dependencies?: React_2.DependencyList): Command<TCommandData>;

/**
 * Returns the command provider for the current page.
 */
export declare const usePageCommandProvider: () => CommandContextType;

/**
 * Allows access to dialog properties.
 *
 * @returns Members to customize the dialog.
 */
export declare const useTemplateDialog: () => TemplateDialogContextProps;

/**
 * Validation rule result type.
 */
export declare interface ValidationResult {
    readonly isValid: boolean;
    readonly errorMessage: string | null;
    hasChanged?: boolean;
}

/**
 * Base type used by validation rules.
 */
export declare interface ValidationRule<P extends ValidationRuleProps, T> {
    (props: P, value: T, fieldValues: Record<string, any>): ValidationResult;
}

/**
 * Represents basic set of validation rule properties.
 */
export declare interface ValidationRuleProps {
    readonly ruleName: string;
    readonly isValid: boolean;
    readonly errorMessage: string | null;
}

export { }
